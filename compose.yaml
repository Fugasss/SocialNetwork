networks:
  internal_network:
    driver: bridge

volumes:
  postgres-data:

x-database-environment: &common-postgres-env
  POSTGRES_DB: ${POSTGRES_DB:-testdb}
  POSTGRES_USER: ${POSTGRES_USER:-testuser}
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-testpassword}

x-spring-environment: &common-spring-env
  SPRING_EUREKA_DEFAULT_ZONE: discovery-service

x-spring-environment-with-db: &common-spring-with-db-env
  <<: *common-postgres-env
  SPRING_EUREKA_DEFAULT_ZONE: discovery-service
  POSTGRES_HOST: postgres-db
  POSTGRES_PORT: 5432



services:
  postgres-db:
    image: postgres:13.15-alpine
    networks:
      internal_network:
    environment:
      <<: *common-postgres-env
    expose:
      - 5432:5432
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G

  discovery-service:
    image: socialnetwork-discovery-service
    networks:
      - internal_network
    ports:
      - "8761:8761"
    environment:
      <<: *common-spring-env

  api-gateway-service:
    image: socialnetwork-gateway-service
    networks:
      - internal_network
    depends_on:
      - discovery-service
    ports:
      - "8080:8080"
    environment:
      <<: *common-spring-env

  user-service:
    image: socialnetwork-user-service
    depends_on:
      - discovery-service
    networks:
      - internal_network
    environment:
      <<: *common-spring-with-db-env

  auth-service:
    image: socialnetwork-auth-service
    depends_on:
      - discovery-service
      - user-service
    networks:
      - internal_network
    environment:
      <<: *common-spring-with-db-env

  post-service:
    image: socialnetwork-post-service
    depends_on:
      - discovery-service
    networks:
      - internal_network
    environment:
      <<: *common-spring-with-db-env

  frontend:
    build: 
      context: ./frontend
      dockerfile: ./docker/Dockerfile
    ports:
      - "80:3000"